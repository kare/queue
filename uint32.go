// Code generated by "gends"; DO NOT EDIT.

package queue // import "kkn.fi/queue"

// Uint32 is a FIFO queue data structure.
type Uint32 []uint32

// NewUint32 creates an empty uint32 queue.
func NewUint32() *Uint32 {
	return &Uint32{}
}

// Enqueue adds a value to queue.
func (q *Uint32) Enqueue(value uint32) {
	(*q) = append([]uint32{value}, (*q)...)
}

// Dequeue removes the least recently added value.
// If called on an empty queue, will return zero value and ErrEmptyQueue.
func (q *Uint32) Dequeue() (uint32, error) {
	if len(*q) == 0 {
		return 0, ErrEmptyQueue
	}
	length := len(*q) - 1
	value := (*q)[length]
	(*q) = (*q)[:length]
	return value, nil
}

// Peek returns the least recently added value.
// If called on an empty queue, will return zero value and ErrEmptyQueue.
func (q *Uint32) Peek() (uint32, error) {
	if len(*q) == 0 {
		return 0, ErrEmptyQueue
	}
	return (*q)[len(*q)-1], nil
}

// Len returns number of values in the queue.
func (q *Uint32) Len() int {
	return len(*q)
}

// IsEmpty returns true if the queue is empty.
func (q *Uint32) IsEmpty() bool {
	return len(*q) == 0
}
